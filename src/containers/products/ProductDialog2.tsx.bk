// import React, { useEffect, useRef, useState } from 'react';
// import { Button } from 'primereact/button';
// import { Dialog } from 'primereact/dialog';
// import { InputText } from 'primereact/inputtext';
// import Form from 'rc-field-form';
// import { Toast } from 'primereact/toast';
// import { ProductService } from '@/services/products.service';
// import { CategoryGroupService } from '@/services/categoryGroup.service';
// import { Product, Category } from '@/models';
// import { HandleApi } from '@/services/handleApi';
// import { LabelField } from '@/components';
// import { classNames } from 'primereact/utils';
// import { RadioButton } from 'primereact/radiobutton';
// import { Dropdown, DropdownChangeEvent } from 'primereact/dropdown';

// type PropType = {
//     idProduct: number,
//     visible: boolean,
//     onClose: () => void,
//     onProductChange: () => void,
// };

// type typeForm = {
//     idProduct: number;
//     idCategory: number;
//     nameProduct: string;
//     idGroupProduct: number;
// }

// const initialForm: typeForm = {
//     idProduct: 0,
//     nameProduct: '',
//     idGroupProduct: 0,
// };


// export default
//     function ProductDialog({ visible, onClose, idProduct, onProductChange }: PropType) {
//     const [form] = Form.useForm();
//     const toast = useRef<Toast>(null);
//     const [loading, setLoading] = useState<boolean>(false);
//     const [productGroups, setProductGroups] = useState<ProductGroup[]>([]);
//     const [selectedProductGroup, setSelectedProductGroup] = useState<ProductGroup>();

//     useEffect(() => {
//         getProductGroup();
//         if (visible && idProduct > 0) {
//             getProduct();
//         }
//     }, [visible]);

//     const HandClose = () => {
//         onClose();
//         form.resetFields();
//         setSelectedProductGroup(undefined);
//     };

//     const getProduct = () => {
//         HandleApi(ProductService.getProduct(idProduct), null).then((res) => {
//             if (res && res.status === 200) {
//                 const { IDLoaiMon, IDNhomMon, TenLoai } = res.data as Product;
//                 console.log(res.data);
//                 const productGroup = productGroups.find((x) => x.IDNhomMon === IDNhomMon);
//                 setSelectedProductGroup(productGroup);
//                 form.setFieldsValue({
//                     idProduct: IDLoaiMon,
//                     nameProduct: TenLoai,
//                     idGroupProduct: IDNhomMon
//                 });
//             }
//         });
//     };

//     const getProductGroup = () => {
//         HandleApi(ProductGroupService.getProductGroups(), toast).then((result) => {
//             if (result.status === 200) {
//                 let data = result.data;
//                 setProductGroups(data);
//             }
//             setLoading(false);
//         });
//     }

//     const onFinish = (values: typeForm) => {
//         setLoading(true);
//         let product: Product = {
//             IDLoaiMon: idProduct,
//             IDNhomMon: selectedProductGroup?.IDNhomMon as number,
//             TenLoai: values.nameProduct,
//         };

//         if (idProduct) { // update
//             HandleApi(ProductService.updateProduct(idProduct, product), toast).then((res) => {
//                 if (res.status === 200) {
//                     onProductChange();
//                     HandClose();
//                 }
//                 setLoading(false);
//             });
//         } else { // create
//             HandleApi(ProductService.createProduct(product), toast).then((res) => {
//                 if (res.status === 201) {
//                     console.log(res.data);
//                     onProductChange();
//                     HandClose();
//                 }
//                 setLoading(false);
//             });
//         }
//     };

//     const onFinishFailed = (errorInfo: any) => {
//         console.log('Failed:', errorInfo);
//     };
//     console.log(selectedProductGroup);
//     return (
//         <>
//             <Toast ref={toast}></Toast>
//             <Dialog header={idProduct ? 'Cập nhật' : 'Thêm mới'} visible={visible} style={{ width: '35vw' }}
//                 onHide={() => { if (!visible) return; HandClose(); }}>
//                 <Form form={form} onFinish={onFinish}
//                     onFinishFailed={onFinishFailed}
//                     initialValues={initialForm}
//                     className="p-fluid">
//                     <LabelField label="Tên loại" name="nameProduct"
//                         rules={[
//                             { required: true, message: 'Tên loại không được bỏ trống.' },
//                         ]}>
//                         {(control, meta) => (<InputText {...control} id="nameProduct"
//                             className={classNames({ 'invalid': meta.errors.length })} />)}
//                     </LabelField>

//                     <LabelField label="Nhóm món" name="idGroupProduct"
//                         rules={[
//                             { required: true, message: 'Nhóm món không được bỏ trống.' },
//                         ]}>
//                         {(control, meta) => (
//                             <Dropdown value={selectedProductGroup}
//                                 onChange={(e: DropdownChangeEvent) => {
//                                     setSelectedProductGroup(e.value);
//                                 }}
//                                 options={productGroups} optionLabel={'TenNhom'}
//                                 placeholder="Chọn nhóm món" className="w-full" />
//                         )}
//                     </LabelField>

//                     <Button loading={loading} type='submit' label={idProduct ? 'Cập nhật' : 'Tạo mới'} className="w-6" style={{ float: 'right' }} />
//                 </Form>
//             </Dialog>
//         </>
//     )
// }